{"version":3,"sources":["game.js"],"names":[],"mappingsfile":"game.js","sourcesContent":["var new_hint_visible = false;\nvar map;\nvar next_clue;\n\nfunction make_hint_marker(d){\n\tif( typeof d.index == 'undefined' ) return false;\n\tvar marker = new google.maps.Marker({\n\t\ticon: {\n\t\t\turl: d.last ? '/asset/images/chest.png' : '/asset/images/message-bottle-icon.png',\n\t\t\tscaledSize: new google.maps.Size(64, 64)\n\t\t},\n\t\tmap: map,\n\t\tposition: new google.maps.LatLng(d.lat, d.lng)\n\t});\n\n\n\tif(typeof(locations[d.id]) != 'undefined'){\n\n\t\treturn;\n\t}\n\tmarker.questions = d.questions;\n\tmarker.index = d.index;\n\tmarker.welcome_text = d.welcome_text;\n\tmarker.clue = d.clue;\n\tmarker.last = d.last;\n\n\n\tmarker.addListener('click', function(){\n\t\topen_marker(marker);\n\t});\n\n\treturn marker;\n}\n\nfunction open_marker(marker){\n\n\t$('.modal .modal-body').html('<p>'+marker.welcome_text+'</p>');\n\t$('.modal').modal('show')\n\tif(marker.questions.length){\n\n\t\tshow_question(marker, 0);\n\t}\n\telse {\n\t\tif(marker.last){\n\t\t\t$('.modal .action-btn').addClass('hidden');\n\t\t\topened_clue(marker)\n\t\t}\n\t\telse {\n\t\t\tshow_clue(marker);\n\t\t}\n\t}\n}\n\nfunction opened_clue(marker){\n\t$('.modal .action-btn').addClass('hidden');\n\n\tvar last_was_key = false;\n\tvar loaded = false;\n\tjQuery.each(locations, function(i, v){\n\t\tif(loaded) return;\n\t\tif(last_was_key){\n\n\t\t\tloaded = true;\n\t\t\tnext_clue = v.clue;\n\t\t}\n\t\telse if(i == marker.index){\n\t\t\tlast_was_key = true;\n\t\t\treturn;\n\t\t}\n\t});\n\n\tif(!loaded){\n\t\tjQuery.get(\n\t\t\turls.next_clue,\n\t\t\t{lat: marker.getPosition().lat(), lng: marker.getPosition().lng()},\n\t\t\tfunction(d){\n\t\t\t\tnext_clue = d;\n\t\t\t\tnew_hint_visible = false;\n\t\t\t\t$('.modal').modal('show').find('.modal-body').html('<p>'+d+'</p>');\n\n\t\t\t\t$('.modal .action-btn').click(function(){\n\t\t\t\t\t$('.modal .modal-body').html('').append('<p>'+next_clue+'</p>');\n\t\t\t\t\t$('.modal .action-btn').addClass('hidden');\n\t\t\t\t})\n\t\t\t}\n\t\t);\n\t}\n\telse {\n\t\t\t$('.modal .modal-body').html('').append('<p>'+next_clue+'</p>');\n\t\t\t$('.modal .action-btn').addClass('hidden');\n\t}\n}\n\nfunction show_clue(marker){\n\t$('.modal .action-btn').removeClass('hidden');\n\t$('.modal .action-btn').text('View Next Clue');\n\n\t$('.modal .action-btn').unbind('click');\n\t$('.modal .action-btn').click(function(){\n\t\topened_clue(marker);\n\t});\n}\n\nfunction opened_question(marker, i){\n\t$('.modal .modal-body').html('').append('<p>'+marker.questions[i].q+'</p>');\n\t\n\tif(marker.questions[i].solved){\n\t\tif(marker.questions.length > i + 1){\n\t\t\tshow_question(marker, i+1);\n\n\n\t\t}\n\t\telse {\n\t\t\tshow_clue(marker);\n\n\t\t}\n\t}\n\telse {\n\n\t\tvar input = $('<input />').addClass('form-control').attr('type', 'text').appendTo($('.modal .modal-body'));\n\t\t$('<div class=\"alert alert-danger invalid-answer\" role=\"alert\">Answer not valid</div>').appendTo('.modal .modal-body').hide();\n\t\t\n\t\t$('.modal .action-btn').unbind('click');\n\t\t\n\t\t$('.modal .action-btn').click(function(){\n\t\t\tverify_answer(input.val(), marker, i);\n\t\t}).text('Submit');\n\t}\n}\n\nfunction show_question(marker, i){\n\t$('.modal .action-btn').removeClass('hidden');\n\t$('.modal .action-btn').text('Next');\n\n\t$('.modal .action-btn').unbind('click');\n\t$('.modal .action-btn').click(function(){\n\t\topened_question(marker, i);\n\t});\n}\n\nfunction verify_answer(input, marker, question_index){\n\tjQuery.getJSON(\n\t\turls.verify_answer,\n\t\t{\n\t\t\tqid: marker.questions[question_index].id,\n\t\t\tanswer: input\n\t\t},\n\t\tfunction(d){\n\t\t\tif(d.success){\n\t\t\t\t$('.invalid-answer').hide();\n\n\n\n\n\t\t\t\tlocations[marker.index].questions[question_index].solved = true;\n\n\n\t\t\t\tif( d.next_question ){\n\t\t\t\t\tlocations[marker.index].questions[question_index+1] =  d.next_question;\n\t\t\t\t\tlocations[marker.index].questions[question_index+1].solved = false;\n\t\t\t\t\tmarker = locations[marker.index];\n\t\t\t\t\topened_question(marker, question_index+1);\n\t\t\t\t}\n\t\t\t\telse {\n\n\t\t\t\t\topened_clue(marker);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$('.invalid-answer').show();\n\t\t\t}\n\t\t});\n}\n\nfunction initMap() {\n\t$('.pac-container').remove();\n\n\t// Specify features and elements to define styles.\n\tvar styleArray=[{featureType:\"landscape\",elementType:\"all\",stylers:[{hue:\"#291306\"},{saturation:80.2},{lightness:-80.8},{gamma:1}]},{featureType:\"landscape.natural.landcover\",elementType:\"geometry.fill\",stylers:[{color:\"#FFF\"},{visibility:\"on\"}]},{featureType:\"poi\",elementType:\"all\",stylers:[{hue:\"#7f4c1c\"},{saturation:54.2},{lightness:-40.4},{gamma:1}]},{featureType:\"road.highway\",elementType:\"all\",stylers:[{hue:\"#514526\"},{saturation:-19.8},{lightness:-1.8},{gamma:1}]},{featureType:\"road.arterial\",elementType:\"all\",stylers:[{hue:\"#514526\"},{saturation:72.4},{lightness:-32.6},{gamma:1}]},{featureType:\"road.local\",elementType:\"all\",stylers:[{hue:\"#514526\"},{saturation:74.4},{lightness:-18},{gamma:1}]},{featureType:\"water\",elementType:\"all\",stylers:[{hue:\"#79B0C6\"},{saturation:-63.2},{lightness:38},{gamma:1}]},{featureType:\"water\",elementType:\"geometry.fill\",stylers:[{visibility:\"on\"},{color:\"#79B0C6\"}]}];\n\t\n\t// Create a map object and specify the DOM element for display.\n\tmap = new google.maps.Map(document.getElementById('map'), {\n\t\tcenter: map_center,\n\t\tscrollwheel: true,\n\t\t// Apply the map style array to the map.\n\t\tstyles: styleArray,\n\t\tzoom: 12\n\t});\n\n\tgoogle.maps.event.trigger(map, 'resize');\n\n\t// Create the search box and link it to the UI element.\n\tvar i = document.createElement('input');\n\t$(i)\n\t\t.addClass('controls')\n\t\t.attr('type', 'text')\n\t\t.attr('id', 'pac-input')\n\t\t.attr('placeholder', 'Search...');\n\n\tvar searchBox = new google.maps.places.SearchBox(i);\n\tmap.controls[google.maps.ControlPosition.TOP_LEFT].push(i);\n\n\n\tvar searchMarkers = [];\n\t// Listen for the event fired when the user selects a prediction and retrieve\n\t// more details for that place.\n\tsearchBox.addListener('places_changed', function() {\n\t\tvar places = searchBox.getPlaces();\n\n\t\tif (places.length == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Clear out the old searchMarkers.\n\t\tsearchMarkers.forEach(function(marker) {\n\t\t\tmarker.setMap(null);\n\t\t});\n\t\tsearchMarkers = [];\n\t\tnew_hint_visible = false;\n\n\t\t// For each place, get the icon, name and location.\n\t\tvar bounds = new google.maps.LatLngBounds();\n\t\tplaces.forEach(function(place) {\n\t\t\tvar icon = {\n\t\t\t\turl: place.icon,\n\t\t\t\tsize: new google.maps.Size(71, 71),\n\t\t\t\torigin: new google.maps.Point(0, 0),\n\t\t\t\tanchor: new google.maps.Point(17, 34),\n\t\t\t\tscaledSize: new google.maps.Size(25, 25)\n\t\t\t};\n\n\t\t\t// Create a marker for each place.\n\t\t\tsearchMarkers.push(new google.maps.Marker({\n\t\t\t\tmap: map,\n\t\t\t\ticon: icon,\n\t\t\t\ttitle: place.name,\n\t\t\t\tposition: place.geometry.location\n\t\t\t}));\n\n\t\t\tif (place.geometry.viewport) {\n\t\t\t\t// Only geocodes have viewport.\n\t\t\t\tbounds.union(place.geometry.viewport);\n\t\t\t} else {\n\t\t\t\tbounds.extend(place.geometry.location);\n\t\t\t}\n\t\t});\n\t\tmap.fitBounds(bounds);\n\t});\n\n\t// Scan for treasure after changes made to map bounds\n\tmap.addListener('idle', function(){\n\t\tif( new_hint_visible ) return;\n\t\tvar location = {\n\t\t\ttop: map.getBounds().getNorthEast().lat(),\n\t\t\tbottom: map.getBounds().getSouthWest().lat(),\n\t\t\tleft: map.getBounds().getSouthWest().lng(),\n\t\t\tright: map.getBounds().getNorthEast().lng(),\n\t\t\tzoom: map.getZoom(),\n\t\t};\n\n\t\t// Request the server with current viewport to see if the target is in the area\n\t\tjQuery.getJSON(urls.location, location, function(d){\n\t\t\tif( typeof d.success == 'undefined' || false == d.success ) return;\n\t\t\tvar marker = make_hint_marker(d)\n\t\t\tif( !marker ) return;\n\n\t\t\tif( typeof locations[marker.index] == 'undefined' ){\n\t\t\t\tlocations[marker.index] = marker;\n \t\t\t\tnew_hint_visible = true;\n \t\t\t}\n\t\t});\n\n\n\n\t})\n}\n\njQuery(window).on('load', function(){\n\tif( 'undefined' != typeof google ){\n\n\t\tinitMap();\n\t\tjQuery.each(locations, function(index, value){\n\t\t\tlocations[index] = make_hint_marker(value);\n\t\t});\n\t}\n\tif('' != clue){\n\t\t$('.modal .modal-body').html('<p>'+clue+'</p>');\n\t\t$('.modal').modal('show');\n\t}\n});"],"sourceRoot":"/source/"}